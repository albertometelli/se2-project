#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\master ../CI.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The term CI (
\emph on
Code Inspection
\emph default
) refers to peer review of any work product, involving code, by trained
 individuals who look for mistakes (also known as defects or issues) using
 a well defined process.
 A mistake is an incorrect feature of the code that can result in the introducti
on of faults into a system which in turn can become errors and failures.
 Therefore the main purpose of code inspection is to identify defects and,
 if necessary, improve the quality of the code.
 Code inspection is a specific case of 
\emph on
static analysis 
\emph default
as a part of the V&V (
\emph on
Verification
\emph default
 and 
\emph on
Validation
\emph default
) process.
\end_layout

\begin_layout Standard
Code revision can be classified into 
\emph on
walkthoughts 
\emph default
and 
\emph on
inspection
\emph default
, those are general approaches to revision of products that can be exploited
 in any stage of the software lifecycle.
 Even if they share the same goal the revision process is quite different:
\end_layout

\begin_layout Itemize

\emph on
walkthroughts
\emph default
 are typically informal reviews that involve experts of domain which are
 in charge of verifying the correctness of the product with respect to their
 viewpoint.
 The producer, in case of code walkthrought the developer, presents the
 code and the attached documentation, if any, and the reviewers discuss
 the correctness of the product.
\end_layout

\begin_layout Itemize

\emph on
inspections
\emph default
 are based on formal evaluation techniques proposed by Fagan in which code
 is exterminated by a group of professional inspectors to check its correctness,
 typically on the bases of a set of quality standards defined as 
\emph on
checklist
\emph default
.
 Contrary to what happens in walkthroughts, here people taking part to the
 inspection have well-defined roles and the process is composed of several
 steps: the moderator chooses participants (readers, testers and inspectors)
 and schedules the meeting that takes place analysing code line-by-line
 with the support of the explenation of the author.
 
\end_layout

\begin_layout Standard
This document is intended to be a track for the inspection process of an
 extract of the Glassfish 4.1 application server code we performed.
 This document is mainly addressed to developers in order to fix possible
 mistakes highlighted during the inspection process and for possible further
 inspection sessions.
\end_layout

\begin_layout Subsection
References
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
[1] Software Engineering 2 course slides.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
[2] Glassfish reference 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://glassfish.pompel.me/
\end_layout

\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
[3] Oracle documentation 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.oracle.com/cd/E18930_01/html/821-2416/ggjue.html#abllb
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Code inspection checklist
\end_layout

\begin_layout Standard
In this subsection we present the checklist followed to perform code inspection
 of an extract of the Glassfish 4.1 application server code.
 
\end_layout

\begin_layout Subsubsection
Naming Conventions 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
1.
 All class names, interface names, method names, class variables, method
 variables, and constants used should have meaningful names and do what
 the name suggests.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
2.
 If one-character variables are used, they are used only for temporary “throwawa
y” variables, such as those used in for loops.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
3.
 Class names are nouns, in mixed case, with the first letter of each word
 in capitalized.
 Examples: class Raster; class ImageSprite.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
4.
 Interface names should be capitalized like classes.
 5.
 Method names should be verbs, with the first letter of each addition word
 capitalized.
 Examples: getBackground(); computeTemperature().
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
5.
 Class variables, also called attributes, are mixed case, but might begin
 with an underscore (‘_’) followed by a lowercase first letter.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
6.
 All the remaining words in the variable name have their first letter capitalize
d.
 Examples: _windowHeight, timeSeriesData.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
7.
 Constants are declared using all uppercase with words separated by an underscor
e.
 Examples: MIN_WIDTH; MAX_HEIGHT.
\end_layout

\begin_layout Subsubsection
Indentation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
8.
 Three or four spaces are used for indentation and done so consistently.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
9.
 No tabs are used to indent.
\end_layout

\begin_layout Subsubsection
Braces
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
10.
 Consistent bracing style is used, either the preferred “Allman” style (first
 brace goes underneath the opening block) or the “Kernighan and Ritchie”
 style (first brace is on the same line of the instruction that opens the
 new block).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
11.
 All if, while, do-while, try-catch, and for statements that have only one
 statement to execute are surrounded by curly braces.
 Example, avoid this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if ( condition ) 
\end_layout

\begin_layout Plain Layout

	doThis();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instad do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if ( condition ) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	doThis(); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
File Organization 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
12.
 Blank lines and optional comments are used to separate sections (beginning
 comments, package/import statements, class/interface declarations which
 include class variable/attributes declarations, constructors, and methods).
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
13.
 Where practical, line length does not exceed 80 characters.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
14.
 When line length must exceed 80 characters, it does NOT exceed 120 characters.
 
\end_layout

\begin_layout Subsubsection
Wrapping Lines 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
15.
 Line break occurs after a comma or an operator.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
16.
 Higher-level breaks are used.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
17.
 A new statement is aligned with the beginning of the expression at the
 same level as the previous line.
 
\end_layout

\begin_layout Subsubsection
Comments
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
18.
 Comments are used to adequately explain what the class, interface, methods,
 and blocks of code are doing.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
19.
 Commented out code contains a reason for being commented out and a date
 it can be removed from the source file if determined it is no longer needed.
 
\end_layout

\begin_layout Subsubsection
Java Source Files 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
20.
 Each Java source file contains a single public class or interface.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
21.
 The public class is the first class or interface in the file.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
22.
 Check that the external program interfaces are implemented consistently
 with what is described in the javadoc.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
23.
 Check that the javadoc is complete (i.e., it covers all classes and files
 part of the set of classes assigned to you).
 
\end_layout

\begin_layout Subsubsection
Package and Import Statements 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
24.
 If any package statements are needed, they should be the first non-comment
 statements.
 Import statements follow.
 
\end_layout

\begin_layout Subsubsection
Class and Interface Declarations 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
25.
 The class or interface declarations shall be in the following order: 
\end_layout

\begin_deeper
\begin_layout Enumerate
A.
 class/interface documentation comment 
\end_layout

\begin_layout Enumerate
class or interface statement 
\end_layout

\begin_layout Enumerate
class/interface implementation comment, if necessary 
\end_layout

\begin_layout Enumerate
class (static) variables 
\end_layout

\begin_deeper
\begin_layout Enumerate
first public class variables 
\end_layout

\begin_layout Enumerate
next protected class variables 
\end_layout

\begin_layout Enumerate
next package level (no access modifier) 
\end_layout

\begin_layout Enumerate
last private class variables
\end_layout

\end_deeper
\begin_layout Enumerate
instance variables 
\end_layout

\begin_deeper
\begin_layout Enumerate
first public instance variables 
\end_layout

\begin_layout Enumerate
next protected instance variables 
\end_layout

\begin_layout Enumerate
next package level (no access modifier) 
\end_layout

\begin_layout Enumerate
last private instance variables
\end_layout

\end_deeper
\begin_layout Enumerate
constructors 
\end_layout

\begin_layout Enumerate
methods
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
26.
 Methods are grouped by functionality rather than by scope or accessibility.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
27.
 Check that the code is free of duplicates, long methods, big classes, breaking
 encapsulation, as well as if coupling and cohesion are adequate.
\end_layout

\begin_layout Subsubsection
Initialization and Declarations 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
28.
 Check that variables and class members are of the correct type.
 Check that they have the right visibility (public/private/protected) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
29.
 heck that variables are declared in the proper scope 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
30.
 Check that constructors are called when a new object is desired 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
31.
 Check that all object references are initialized before use 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
32.
 Variables are initialized where they are declared, unless dependent upon
 a computation 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
33.
 Declarations appear at the beginning of blocks (A block is any code surrounded
 by curly braces “{“ and “}” ).
 The exception is a variable can be declared in a ‘for’ loop.
 
\end_layout

\begin_layout Subsubsection
Method Calls
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
34.
 Check that parameters are presented in the correct order 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
35.
 Check that the correct method is being called, or should it be a different
 method with a similar name 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
36.
 Check that method returned values are used properly 
\end_layout

\begin_layout Subsubsection
Arrays 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
37.
 Check that there are no off-by-one errors in array indexing (that is, all
 required array elements are correctly accessed through the index) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
38.
 Check that all array (or other collection) indexes have been prevented
 from going out-of-bounds
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
39.
 Check that constructors are called when a new array item is desired 
\end_layout

\begin_layout Subsubsection
Object Comparison 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
40.
 Check that all objects (including Strings) are compared with "equals" and
 not with "==" 
\end_layout

\begin_layout Subsubsection
Output Format
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
41.
 Check that displayed output is free of spelling and grammatical errors.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
42.
 Check that error messages are comprehensive and provide guidance as to
 how to correct the problem 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
43.
 Check that the output is formatted correctly in terms of line stepping
 and spacing 
\end_layout

\begin_layout Subsubsection
Computation, Comparisons and Assignments 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
44.
 Check that the implementation avoids “brutish programming: (see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://users.csc.calpoly.edu/~jdalbey/SWE/CodeSmells/bonehead.html)
\end_layout

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
45.
 Check order of computation/evaluation, operator precedence and parenthesizing
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
46.
 Check the liberal use of parenthesis is used to avoid operator precedence
 problems.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
47.
 Check that all denominators of a division are prevented from being zero
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
48.
 Check that integer arithmetic, especially division, are used appropriately
 to avoid causing unexpected truncation/rounding 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
49.
 Check that the comparison and Boolean operators are correct 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
50.
 Check throw-catch expressions, and check that the error condition is actually
 legitimate
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
51.
 Check that the code is free of any implicit type conversions 
\end_layout

\begin_layout Subsubsection
Exceptions 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
52.
 Check that the relevant exceptions are caught 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
53.
 Check that the appropriate action are taken for each catch block 
\end_layout

\begin_layout Subsubsection
Flow of Control 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
54.
 In a switch statement, check that all cases are addressed by break or return
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
55.
 Check that all switch statements have a default branch 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
56.
 Check that all loops are correctly formed, with the appropriate initialization,
 increment and termination expressions 
\end_layout

\begin_layout Subsubsection
Files
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
57.
 Check that all files are properly declared and opened 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
58.
 Check that all files are closed properly, even in the case of an error
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
59.
 Check that EOF conditions are detected and handled correctly 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
60.
 Check that all file exceptions are caught and dealt with accordingly
\end_layout

\begin_layout Subsection
Our code inspection process
\end_layout

\begin_layout Standard
Fagan inspection, as already mentioned, being a formal analysis technique,
 has a specific process and roles associated to the participants; considered
 the academic nature of this document we think that such an approach should
 be inappropriate, therefore beside the manual inspection either based on
 the given checklist or exploiting other considerations about the code,
 we leveraged on automatic tools in order to discover further defects.
 The following list, shows the techniques and tools adopted.
\end_layout

\begin_layout Itemize

\emph on
Manual inspection
\emph default
: revision of the code line by line performed by the group members together
 in order to discover defects according to:
\end_layout

\begin_deeper
\begin_layout Itemize
the 
\emph on
checklist
\emph default
 proposed in the assignment,
\end_layout

\begin_layout Itemize
other considerations based on the experience of the group members.
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Automatic code review
\emph default
: revision of the code performed by static code analyzers, in particular
 the following has been used
\begin_inset Foot
status open

\begin_layout Plain Layout
They are all very similar but differ in the importance given to different
 aspects of code quality.
\end_layout

\end_inset

:
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
SonarQube
\emph default
: an open platform to manage code quality (duplications, complexity, potential
 bugs, coding rules, comments, architecture and design) 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.sonarqube.org/
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize

\emph on
PMD
\emph default
: a Java source code analyzer aimed to finds common programming flaws like
 unused variables, empty catch blocks, unnecessary object creation 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://pmd.github.io/
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize

\emph on
FindBugs
\emph default
: a program which uses static analysis to look for bugs in Java code
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://findbugs.sourceforge.net/
\end_layout

\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
This document is composed of five sections and an appendix.
\end_layout

\begin_layout Itemize
The first section, this one, provides and overall description of the review
 processes focusing on the specific assignment consisting in the inspection
 of an extract of the Glassfish 4.1 application server code.
 It also presents the checklist used in the following sections.
\end_layout

\begin_layout Itemize
The second section is devoted to the description of the extract of code.
 Classes and method names will be stated with their location in the source
 code.
\end_layout

\begin_layout Itemize
The third section provides the illustration of the functional role of those
 classes and methods both in informal language with respect to the JEE architect
ure and in semiformal way by means of UML class diagram to highlight dependencie
s between classes.
 We will focus on the reverse engineering approach we adopted.
\end_layout

\begin_layout Itemize
The fourth section is devoted to the inspection.
 For each category of defects and for each defect description, issues identified
 will be stated with reference to the line of the code involved, the motivation
 and a possible solution when appropriate.
\end_layout

\begin_layout Itemize
The fifth section describes other possible problems identified during the
 inspection that do not conform to the points presented in the checklist.
\end_layout

\begin_layout Itemize
The appendix contains a brief description of the tools used to produce this
 documents and the number of hours each group member has worked towards
 the fulfillment of this deadline.
\end_layout

\end_body
\end_document
